package com.example.administrator.onlinelearning.CommonAndPlugin;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.onlinelearning.Model.Teacher;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACHER".
*/
public class TeacherDao extends AbstractDao<Teacher, Long> {

    public static final String TABLENAME = "TEACHER";

    /**
     * Properties of entity Teacher.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Tid = new Property(0, Long.class, "tid", true, "_id");
        public final static Property Tphone = new Property(1, String.class, "tphone", false, "TPHONE");
        public final static Property Tpwd = new Property(2, String.class, "tpwd", false, "TPWD");
        public final static Property Tname = new Property(3, String.class, "tname", false, "TNAME");
    }


    public TeacherDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: tid
                "\"TPHONE\" TEXT," + // 1: tphone
                "\"TPWD\" TEXT," + // 2: tpwd
                "\"TNAME\" TEXT);"); // 3: tname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Teacher entity) {
        stmt.clearBindings();
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(1, tid);
        }
 
        String tphone = entity.getTphone();
        if (tphone != null) {
            stmt.bindString(2, tphone);
        }
 
        String tpwd = entity.getTpwd();
        if (tpwd != null) {
            stmt.bindString(3, tpwd);
        }
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(4, tname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Teacher entity) {
        stmt.clearBindings();
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(1, tid);
        }
 
        String tphone = entity.getTphone();
        if (tphone != null) {
            stmt.bindString(2, tphone);
        }
 
        String tpwd = entity.getTpwd();
        if (tpwd != null) {
            stmt.bindString(3, tpwd);
        }
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(4, tname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Teacher readEntity(Cursor cursor, int offset) {
        Teacher entity = new Teacher( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tphone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tpwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // tname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Teacher entity, int offset) {
        entity.setTid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTphone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTpwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Teacher entity, long rowId) {
        entity.setTid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Teacher entity) {
        if(entity != null) {
            return entity.getTid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Teacher entity) {
        return entity.getTid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
