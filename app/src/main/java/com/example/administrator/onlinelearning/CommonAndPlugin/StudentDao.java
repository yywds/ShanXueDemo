package com.example.administrator.onlinelearning.CommonAndPlugin;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.onlinelearning.Model.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, String.class, "sid", false, "SID");
        public final static Property Sphone = new Property(2, String.class, "sphone", false, "SPHONE");
        public final static Property Spwd = new Property(3, String.class, "spwd", false, "SPWD");
        public final static Property Sname = new Property(4, String.class, "sname", false, "SNAME");
        public final static Property Snickname = new Property(5, String.class, "snickname", false, "SNICKNAME");
        public final static Property Ssex = new Property(6, String.class, "ssex", false, "SSEX");
        public final static Property Sschool = new Property(7, String.class, "sschool", false, "SSCHOOL");
        public final static Property Sbirthday = new Property(8, String.class, "sbirthday", false, "SBIRTHDAY");
        public final static Property Swhere = new Property(9, String.class, "swhere", false, "SWHERE");
        public final static Property Scomment = new Property(10, String.class, "scomment", false, "SCOMMENT");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SID\" TEXT," + // 1: sid
                "\"SPHONE\" TEXT," + // 2: sphone
                "\"SPWD\" TEXT," + // 3: spwd
                "\"SNAME\" TEXT," + // 4: sname
                "\"SNICKNAME\" TEXT," + // 5: snickname
                "\"SSEX\" TEXT," + // 6: ssex
                "\"SSCHOOL\" TEXT," + // 7: sschool
                "\"SBIRTHDAY\" TEXT," + // 8: sbirthday
                "\"SWHERE\" TEXT," + // 9: swhere
                "\"SCOMMENT\" TEXT);"); // 10: scomment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String sphone = entity.getSphone();
        if (sphone != null) {
            stmt.bindString(3, sphone);
        }
 
        String spwd = entity.getSpwd();
        if (spwd != null) {
            stmt.bindString(4, spwd);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(5, sname);
        }
 
        String snickname = entity.getSnickname();
        if (snickname != null) {
            stmt.bindString(6, snickname);
        }
 
        String ssex = entity.getSsex();
        if (ssex != null) {
            stmt.bindString(7, ssex);
        }
 
        String sschool = entity.getSschool();
        if (sschool != null) {
            stmt.bindString(8, sschool);
        }
 
        String sbirthday = entity.getSbirthday();
        if (sbirthday != null) {
            stmt.bindString(9, sbirthday);
        }
 
        String swhere = entity.getSwhere();
        if (swhere != null) {
            stmt.bindString(10, swhere);
        }
 
        String scomment = entity.getScomment();
        if (scomment != null) {
            stmt.bindString(11, scomment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String sphone = entity.getSphone();
        if (sphone != null) {
            stmt.bindString(3, sphone);
        }
 
        String spwd = entity.getSpwd();
        if (spwd != null) {
            stmt.bindString(4, spwd);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(5, sname);
        }
 
        String snickname = entity.getSnickname();
        if (snickname != null) {
            stmt.bindString(6, snickname);
        }
 
        String ssex = entity.getSsex();
        if (ssex != null) {
            stmt.bindString(7, ssex);
        }
 
        String sschool = entity.getSschool();
        if (sschool != null) {
            stmt.bindString(8, sschool);
        }
 
        String sbirthday = entity.getSbirthday();
        if (sbirthday != null) {
            stmt.bindString(9, sbirthday);
        }
 
        String swhere = entity.getSwhere();
        if (swhere != null) {
            stmt.bindString(10, swhere);
        }
 
        String scomment = entity.getScomment();
        if (scomment != null) {
            stmt.bindString(11, scomment);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sphone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // spwd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // snickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ssex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sschool
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sbirthday
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // swhere
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // scomment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSphone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSpwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSnickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSsex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSschool(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSbirthday(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSwhere(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setScomment(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
